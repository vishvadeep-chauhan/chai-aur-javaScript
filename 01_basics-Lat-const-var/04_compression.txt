JavaScript Comparison Operators

In JavaScript, comparison operators are used to compare two values. They return a boolean value: either true or false. These operators are crucial in decision-making and controlling the flow of code, such as in if statements and loops.

1. Types of Comparison Operators

1.1 Equality Comparison
	1.	== (Loose Equality):
	•	Compares values after type conversion.
	•	Example:

console.log(5 == "5"); // Output: true (type conversion happens)
console.log(true == 1); // Output: true


	2.	=== (Strict Equality):
	•	Compares values without type conversion.
	•	Example:

console.log(5 === "5"); // Output: false (no type conversion)
console.log(true === 1); // Output: false



1.2 Inequality Comparison
	1.	!= (Loose Inequality):
	•	Compares values after type conversion.
	•	Example:

console.log(5 != "5"); // Output: false (type conversion happens)
console.log(5 != 6); // Output: true


	2.	!== (Strict Inequality):
	•	Compares values without type conversion.
	•	Example:

console.log(5 !== "5"); // Output: true (different types)
console.log(5 !== 5); // Output: false



1.3 Relational Comparison
	1.	> (Greater than):
	•	Example:

console.log(10 > 5); // Output: true
console.log(5 > 10); // Output: false


	2.	< (Less than):
	•	Example:

console.log(3 < 8); // Output: true
console.log(10 < 5); // Output: false


	3.	>= (Greater than or equal to):
	•	Example:

console.log(10 >= 10); // Output: true
console.log(8 >= 10); // Output: false


	4.	<= (Less than or equal to):
	•	Example:

console.log(5 <= 5); // Output: true
console.log(7 <= 6); // Output: false



1.4 Special Comparison
	1.	Object.is():
	•	Compares two values for exact equality.
	•	It is similar to ===, but handles NaN and -0/+0 better.
	•	Example:

console.log(Object.is(NaN, NaN)); // Output: true
console.log(Object.is(0, -0)); // Output: false

2. Rules of Comparison
	1.	When comparing strings:
	•	Strings are compared character by character, based on Unicode values.
	•	Example:

console.log("apple" > "banana"); // Output: false ("a" has a lower Unicode value than "b")
console.log("2" > "12"); // Output: true (compares character by character)


	2.	When comparing numbers and strings:
	•	Strings are converted to numbers.
	•	Example:

console.log("5" > 3); // Output: true
console.log("abc" > 2); // Output: false (invalid string becomes NaN)


	3.	Comparison with null and undefined:
	•	null and undefined are equal only to themselves when using ==.
	•	Example:

console.log(null == undefined); // Output: true
console.log(null === undefined); // Output: false


	4.	Comparison with NaN:
	•	NaN is not equal to any value, including itself.
	•	Example:

console.log(NaN == NaN); // Output: false
console.log(Object.is(NaN, NaN)); // Output: true

3. Programs for Practice

Program 1: Compare Two Numbers

let a = 10;
let b = 20;

if (a > b) {
  console.log("a is greater than b");
} else if (a < b) {
  console.log("a is less than b");
} else {
  console.log("a is equal to b");
}

Program 2: Check Strict Equality

let num = 5;
let str = "5";

if (num === str) {
  console.log("Strictly equal");
} else {
  console.log("Not strictly equal");
}

Program 3: Compare Strings

let string1 = "apple";
let string2 = "banana";

if (string1 > string2) {
  console.log(`${string1} is greater than ${string2}`);
} else {
  console.log(`${string1} is less than ${string2}`);
}

Program 4: Handle null and undefined

let value = null;

if (value == undefined) {
  console.log("Value is either null or undefined");
} else {
  console.log("Value is defined");
}

Program 5: Check for NaN

let value = NaN;

if (isNaN(value)) {
  console.log("The value is NaN");
} else {
  console.log("The value is a valid number");
}

4. Practice Questions
	1.	What will be the output of the following?

console.log(0 == false);
console.log(0 === false);

	•	a) true, true
	•	b) true, false
	•	c) false, false
	•	d) false, true

	2.	What will the following code print?

console.log("2" > "12");

	•	a) true
	•	b) false

	3.	What will be the result of this comparison?

console.log(null > 0);
console.log(null == 0);
console.log(null >= 0);

	•	a) false, false, true
	•	b) false, true, false
	•	c) false, false, false
	•	d) true, false, true

	4.	Compare the following:

console.log("apple" < "banana");
console.log("5" == 5);
console.log("5" === 5);


	5.	What is the output of this code?

let obj1 = { a: 1 };
let obj2 = { a: 1 };
console.log(obj1 == obj2);
console.log(obj1 === obj2);

	•	a) true, true
	•	b) false, false
	•	c) true, false
	•	d) false, true

5. Key Points to Remember
	1.	Use === (strict equality) over == to avoid unexpected type conversions.
	2.	Strings are compared lexicographically (character by character).
	3.	Be cautious when comparing null, undefined, and NaN.
	4.	Objects are compared by reference, not by value.
	5.	Use Object.is() for more precise equality checks in edge cases like NaN and -0.

By mastering these comparison concepts, you’ll be better equipped to handle conditional logic and debugging in JavaScript!